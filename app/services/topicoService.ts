import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getDocs,
  updateDoc,
} from "firebase/firestore";
import { Topico } from "../types/Topico";
import { db } from "../lib/firebase";

// ‚úÖ Nome da cole√ß√£o em min√∫sculo (boas pr√°ticas)
const topicosCollection = collection(db, "topicos");

// üü¢ Criar novo t√≥pico
export async function salvarTopico(topico: Omit<Topico, "uid">) {
  try {
    await addDoc(topicosCollection, {
      ...topico,
      criadoEm: topico.criadoEm ?? new Date().toISOString(),
    });
  } catch (error) {
    console.error("Erro ao salvar t√≥pico:", error);
    throw error;
  }
}

// üü£ Buscar todos os t√≥picos
export async function buscarTodosTopicos(): Promise<Topico[]> {
  try {
    const querySnapshot = await getDocs(topicosCollection);

    const topicos: Topico[] = querySnapshot.docs.map((docSnap) => {
      const data = docSnap.data();

      return {
        uid: docSnap.id,
        ...data,
      } as Topico;
    });

    return topicos;
  } catch (error) {
    console.error("Erro ao buscar t√≥picos:", error);
    throw error;
  }
}

// üü† Editar t√≥pico
export async function editarTopico(id: string, topico: Topico) {
  try {
    const docRef = doc(db, "topicos", id);
    const topicoAtualizado = {
      ...topico,
      criadoEm: topico.criadoEm ?? new Date().toISOString(),
    };
    await updateDoc(docRef, topicoAtualizado);
  } catch (error) {
    console.error("Erro ao editar t√≥pico:", error);
    throw error;
  }
}

// üî¥ Excluir t√≥pico
export async function excluirTopico(id: string) {
  try {
    const docRef = doc(db, "topicos", id);
    await deleteDoc(docRef);
  } catch (error) {
    console.error("Erro ao excluir t√≥pico:", error);
    throw error;
  }
}
